{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["dbUrl","axios","get","then","response","data","newContact","post","id","delete","put","Persons","persons","filter","deleteContact","person","name","toUpperCase","includes","length","map","key","Person","number","onClick","PersonForm","handleInpChangeName","newName","handleInpChangeNumber","newNumber","addPerson","onSubmit","value","onChange","type","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","notification","setNotification","notificationType","setNotificationType","useEffect","personsService","event","target","preventDefault","ifHas","reduce","accumulator","newPerson","returnedContact","concat","setTimeout","catch","error","console","log","window","confirm","find","success","returnedPerson","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5170d1d9.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst dbUrl = '/api/persons'\r\n\r\nconst getPersons = () => {\r\n  const request = axios.get(dbUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createContact = newContact => {\r\n  const request = axios.post(dbUrl, newContact)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst del = id => {\r\n  axios.delete(`${dbUrl}/${id}`)\r\n}\r\n\r\nconst change = (id, newContact) => {\r\n  const request = axios.put(`${dbUrl}/${id}`, newContact)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getPersons, createContact, del, change }","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [notificationType, setNotificationType] = useState('notification')\n\n  useEffect(() => {\n    personsService\n      .getPersons()\n      .then(persons => {\n        setPersons(persons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const counter = (accumulator, value) => accumulator + 1;\n    const ifHas = persons\n      .map(person => person.name)\n      .filter(name => name === newName)\n      .reduce(counter, 0)\n\n    if (newName && newNumber) {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n      }\n\n      if (ifHas === 0) {\n        personsService.createContact(newPerson)\n          .then(returnedContact => {\n            setPersons(persons.concat(returnedContact))\n            setNewName('')\n            setNewNumber('')\n            setNotificationType('notification')\n            setNotification(`Added ${newPerson.name}`)\n            setTimeout(() => { setNotification(null) }, 4000)\n          })\n          .catch(error => {\n            setNotificationType('error')\n            setNotification(`Error: ${error.message}`)\n            setTimeout(() => { setNotification(null) }, 4000)\n            console.log(error.response.data)\n          })\n\n      } else {\n        if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          const id = persons.find(person => person.name === newPerson.name).id\n          var success = true\n          personsService.change(id, newPerson)\n            .then(returnedPerson => setPersons(persons.map(person => person.id !== id ? person : returnedPerson)))\n            .catch(error => {\n              success = false\n              setNotificationType('error')\n              setNotification(`${newPerson.name} has already been removed from the server`)\n              setTimeout(() => { setNotification(null) }, 4000)\n              setPersons(persons.filter(p => p.id !== id))\n            })\n          setNewName('')\n          setNewNumber('')\n          if (success) {\n            setNotificationType('notification')\n            setNotification(`Changed the number for ${newPerson.name}`)\n            setTimeout(() => { setNotification(null) }, 4000)\n          }\n        }\n      }\n    }\n  }\n\n  const deleteContact = (person) => {\n    if (window.confirm(`Delete ${person.name}`)) {\n      personsService.del(person.id)\n      setPersons(persons.filter(p => p !== person))\n      setNotification(`Deleted ${person.name}`)\n      setTimeout(() => { setNotification(null) }, 4000)\n    }\n  }\n\n  const handleInpChangeName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleInpChangeNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={notification} type={notificationType} />\n      <p>Filter shown <input\n        value={filter}\n        onChange={handleFilterChange}\n      /></p>\n\n      <h2>Add a new contact</h2>\n      <PersonForm\n        handleInpChangeName={handleInpChangeName}\n        handleInpChangeNumber={handleInpChangeNumber}\n        newName={newName}\n        newNumber={newNumber}\n        addPerson={addPerson}\n      />\n\n      <h2>Contacts</h2>\n      <Persons persons={persons} filter={filter} deleteContact={deleteContact} />\n    </div >\n  )\n}\n\nconst Persons = ({ persons, filter, deleteContact }) => (\n  <div>\n    {\n      persons\n        .filter(person => person.name.toUpperCase().includes(filter.toUpperCase()) || filter.length === 0)\n        .map(person => <Person person={person} key={person.name} deleteContact={deleteContact} />)\n    }\n  </div>\n)\n\nconst Person = ({ person, deleteContact }) => (\n  <div>\n    {person.name} {person.number + \" \"}\n    <button onClick={() => deleteContact(person)}>delete</button>\n  </div>\n)\n\nconst PersonForm = ({ handleInpChangeName, newName, handleInpChangeNumber, newNumber, addPerson }) => (\n  <form onSubmit={addPerson}>\n    <div>\n      name: <input\n        value={newName}\n        onChange={handleInpChangeName}\n      />\n    </div>\n    <div>\n      number: <input\n        value={newNumber}\n        onChange={handleInpChangeNumber}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}